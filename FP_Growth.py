import mlxtend
import numpy as np
import pandas as pd
import time
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import fpgrowth
start = time.time()

data= np.array([
    ['피자', '치킨'],
    ['한식', '치킨', '피자', '디저트'],
    ['족발', '치킨', '피자'],
    ['샐러드', '스시'],
    ['분식', '치킨'],
    ['샐러드'],
    ['양식', '치킨', '피자'],
    ['한식', '족발', '치킨'],
    ['한식', '스시'],
    ['스시', '피자', '샐러드', '스테이크'],
    ['스테이크', '샐러드', '치킨'],
    ['스시', '고기', '돈까스'],
    ['분식', '돈까스'],
    ['족발', '샐러드', '분식', '양식'],
    ['돈까스', '스시'],
    ['양식', '스시', '중식', '일식', '돈까스', '피자'],
    ['일식', '스시', '분식'],
    ['스테이크', '스시', '치킨', '스시', '피자', '샐러드', '돈까스', '분식', '중식', '한식'],
    ['스시', '피자', '샐러드', '스테이크'],
    ['스테이크', '스시', '치킨'],
    ['스테이크', '스시', '한식'],
    ['샐러드', '디저트'],
    ['치킨', '피자'],
    ['샐러드', '피자', '일식'],
    ['분식'],
    ['샐러드', '중식', '일식'],
    ['양식', '피자'],
    ['돈까스', '족발', '샐러드'],
    ['한식', '분식'],
    ['스시', '중식', '샐러드', '스테이크'],
    ['스테이크', '샐러드', '치킨'],
    ['중식', '고기', '돈까스'],
    ['분식', '한식'],
    ['족발', '피자'],
    ['돈까스'],
    ['양식', '스시', '중식', '일식', '돈까스', '피자'],
    ['양식', '분식'],
    ['스시', '치킨', '스시', '피자', '샐러드', '돈까스', '분식', '중식', '한식'],
    ['스시', '피자', '샐러드', '스테이크'],
    ['스테이크', '스시', '치킨'],
    ['스시', '치킨', '스시', '피자', '샐러드', '돈까스', '분식', '중식', '한식'],
    ['스시', '피자', '샐러드', '스테이크'],
    ['스테이크', '스시', '치킨'],
    ['스테이크', '스시', '치킨'],
    ['스테이크', '스시', '한식'],
    ['샐러드', '디저트'],
    ['치킨', '피자'],
    ['샐러드', '피자', '일식'],
    ['분식'],
    ['샐러드', '중식', '일식'],
    ['양식', '피자'],
    ['양식', '스시', '중식', '일식', '돈까스', '피자'],
    ['일식', '스시', '분식'],
    ['스테이크', '스시', '치킨', '스시', '피자', '샐러드', '돈까스', '분식', '중식', '한식'],
    ['스시', '피자', '샐러드', '스테이크'],
    ['한식', '치킨', '피자', '디저트'],
    ['족발', '피자'],
    ['샐러드', '스시'],
    ['분식', '치킨'],
    ['샐러드'],
    ['양식', '치킨', '피자'],
    ['스시', '피자', '샐러드', '스테이크'],
    ['스테이크', '샐러드', '치킨'],
    ['스시', '고기', '돈까스']
])

df_data=pd.DataFrame(data)
# print(df_data)
# TransactionEncoder => 파이썬의 리스트 트랜잭션 데이터에 대한 인코딩 함수 -> mlxtend library 사용시 인코딩되어서 연산하는데 사용.
te = TransactionEncoder()
te_array = te.fit(data).transform(data)
#메타데이터를 기반으로 dataFrame 생성.
df = pd.DataFrame(te_array, columns=te.columns_)

# print(df)

# min_support => FP_Growth 알고리즘에서 사용되는 최소 지지도 설정.
print(fpgrowth(df, min_support=0.4, use_colnames=True))
print('측정시간:', time.time()-start)
